#==============================================================================
#   WARNING!!  This file is overwritten by the Block UI Styler while generating
#   the automation code. Any modifications to this file will be lost after
#   generating the code again.
# 
#        Filename:  X:\rhodri.kent\nx\NX OPEN\Duplicate Mesh\select_element.py
# 
#         This file was generated by the NX Block UI Styler
#         Created by: Rhodri.Kent
#               Version: NX 1953
#               Date: 06-09-2021  (Format: mm-dd-yyyy)
#               Time: 16:35 (Format: hh-mm)
# 
#==============================================================================

#==============================================================================
#   Purpose:  This TEMPLATE file contains Python source to guide you in the
#   construction of your Block application dialog. The generation of your
#   dialog file (.dlx extension) is the first step towards dialog construction
#   within NX.  You must now create a NX Open application that
#   utilizes this file (.dlx).
# 
#   The information in this file provides you with the following:
# 
#   1.  Help on how to load and display your Block UI Styler dialog in NX
#       using APIs provided in NXOpen.BlockStyler namespace
#   2.  The empty callback methods (stubs) associated with your dialog items
#       have also been placed in this file. These empty methods have been
#       created simply to start you along with your coding requirements.
#       The method name, argument list and possible return values have already
#       been provided for you.
#==============================================================================

#------------------------------------------------------------------------------
# These imports are needed for the following template code
#------------------------------------------------------------------------------
import NXOpen
import NXOpen.BlockStyler
import NXOpen.CAE
import time

theSession  = NXOpen.Session.GetSession()
workPart = theSession.Parts.BaseWork
displaySimPart = theSession.Parts.BaseDisplay

elems = []

theUI = NXOpen.UI.GetUI()
theMessageBox = theUI.NXMessageBox
lw = theSession.ListingWindow
lw.Open()

#------------------------------------------------------------------------------
# Represents Block Styler application cls
#------------------------------------------------------------------------------
class select_element:
    # static class members
    theSession = None
    theUI = None
    
    #------------------------------------------------------------------------------
    # Constructor for NX Styler class
    #------------------------------------------------------------------------------
    def __init__(self):
        try:
            self.theSession = NXOpen.Session.GetSession()
            self.theUI = NXOpen.UI.GetUI()
            self.theDlxFileName = "select_element.dlx"
            self.theDialog = self.theUI.CreateDialog(self.theDlxFileName)
            self.theDialog.AddApplyHandler(self.apply_cb)
            self.theDialog.AddOkHandler(self.ok_cb)
            self.theDialog.AddUpdateHandler(self.update_cb)
            self.theDialog.AddInitializeHandler(self.initialize_cb)
            self.theDialog.AddDialogShownHandler(self.dialogShown_cb)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            raise ex
        
    
    # ------------------------------- DIALOG LAUNCHING ---------------------------------
    # 
    #     Before invoking this application one needs to open any part/empty part in NX
    #     because of the behavior of the blocks.
    # 
    #     Make sure the dlx file is in one of the following locations:
    #         1.) From where NX session is launched
    #         2.) $UGII_USER_DIR/application
    #         3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    #             recommended. This variable is set to a full directory path to a file 
    #             containing a list of root directories for all custom applications.
    #             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    # 
    #     You can create the dialog using one of the following way:
    # 
    #     1. Journal Replay
    # 
    #         1) Replay this file through Tool->Journal->Play Menu.
    # 
    #     2. USER EXIT
    # 
    #         1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    #         2) Invoke the Shared Library through File->Execute->NX Open menu.
    # 
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # This method shows the dialog on the screen
    #------------------------------------------------------------------------------
    def Show(self):
        try:
            self.theDialog.Show()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Method Name: Dispose
    #------------------------------------------------------------------------------
    def Dispose(self):
        if self.theDialog != None:
            self.theDialog.Dispose()
            self.theDialog = None
    
    #------------------------------------------------------------------------------
    # ---------------------Block UI Styler Callback Functions--------------------------
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # Callback Name: initialize_cb
    #------------------------------------------------------------------------------
    def initialize_cb(self):
        try:
            self.group0 = self.theDialog.TopBlock.FindBlock("group0")
            self.selectElements0 = self.theDialog.TopBlock.FindBlock("selectElements0")
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: dialogShown_cb
    # This callback is executed just before the dialog launch. Thus any value set 
    # here will take precedence and dialog will be launched showing that value. 
    #------------------------------------------------------------------------------
    def dialogShown_cb(self):
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: apply_cb
    #------------------------------------------------------------------------------
    def apply_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            elems.insert(0,self.selectElements0)
            ok_process(elems)
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return errorCode
    
    #------------------------------------------------------------------------------
    # Callback Name: update_cb
    #------------------------------------------------------------------------------
    def update_cb(self, block):
        try:
            elems.insert(0,self.selectElements0)
            if block == self.selectElements0:
                # ---- Enter your code here -----
                elems.insert(0,block)
                #elems.append(block)
                NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str('Warning - this process is slow, taking 0.08s per element.'))
                pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return 0
    
    #------------------------------------------------------------------------------
    # Callback Name: ok_cb
    #------------------------------------------------------------------------------
    def ok_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            #ok_process(elems)
            errorCode = self.apply_cb()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return errorCode
    
    
    #------------------------------------------------------------------------------
    # Function Name: GetBlockProperties
    # Returns the propertylist of the specified BlockID
    #------------------------------------------------------------------------------
    def GetBlockProperties(self, blockID):
        try:
            return self.theDialog.GetBlockProperties(blockID)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return None

def ok_process(el):
    start_time  = time.time()
    
    pass
    es = []
    [es.append(elems[0].GetProperties().GetTaggedObjectVector("SelectedObjects")[i]) for i in range(0,len(elems[0].GetProperties().GetTaggedObjectVector("SelectedObjects")))]
    t = time.time()
    lw.WriteLine("time = " + str( t-start_time))
##    lw.WriteLine(str(es))

    fEModel1 = workPart.FindObject("FEModel")
    meshManager1 = fEModel1.Find("MeshManager")
    
    #lw.WriteLine(str(meshManager1))
    meshCollectorBuilder1 = meshManager1.CreateCollectorBuilder(NXOpen.CAE.MeshCollector.Null,'Solid')
    meshCollectorBuilder1.CollectorName = "3D Duplicated Mesh"
    nXObject1 = meshCollectorBuilder1.Commit()
    meshCollectorBuilder1.Destroy()
    
    meshCollectorBuilder2 = meshManager1.CreateCollectorBuilder(NXOpen.CAE.MeshCollector.Null,'ThinShell')
    meshCollectorBuilder2.CollectorName = "2D Duplicated Mesh"    
    nXObject2 = meshCollectorBuilder2.Commit()
       
    meshCollectorBuilder2.Destroy()

    dims = []

    t1 = time.time()
    
    for j,e in enumerate(es):
        
        lw.WriteLine("obj = " + str(e))
        lw.WriteLine("size = " + str(len(es)))
##        lw.WriteLine("properties = " + str(el.GetProperties()))
##        Nodes = e[0].GetProperties().GetTaggedObjectVector("SelectedObjects")[0].GetNodes()
        Nodes = e.GetNodes()
        #lw.WriteLine(str(Nodes))
        NodeIDs = [Nodes[i].Label for i in range(0,len(Nodes))]
        lw.WriteLine(str(NodeIDs))
        [lw.WriteLine("nodes = " + str(Nodes[i].Label)) for i in range(0,len(Nodes))]
        lw.WriteLine("element = " + str(e.Label))
        lw.WriteLine("shape = " + str(e.Shape))
        shape = str(e.Shape)
        lw.WriteLine("journal identifier = " + str(e.JournalIdentifier))
        lw.WriteLine("Name = " + str(e.Name))
        lw.WriteLine("Mesh = " + str(e.Mesh))
        lw.WriteLine("Number Of CornerNodes = " + str(e.NumberOfCornerNodes))
        lw.WriteLine("Order = " + str(e.Order))
        order = str(e.Order)
        lw.WriteLine("OwningComponent = " + str(e.OwningComponent))
        lw.WriteLine("OwningPart = " + str(e.OwningPart))
        lw.WriteLine("Prototype = " + str(e.Prototype))
        lw.WriteLine("GetSolverCardSyntax" + str(e.GetSolverCardSyntax()[4]))
        lw.WriteLine("element type = " + str(e.GetSolverCardSyntax()[4][:8].strip()))
        lw.WriteLine("Print = " + str(e.Print()))


        if shape == "4" and order == "2":
            idx_T10 = [0,4,1,5,2,6,7,8,9,3]
            dim = '3d'
            dims.append(dim)
            meshCollector1 = meshManager1.FindObject("MeshCollector[3D Duplicated Mesh]")
            lw.WriteLine(str(meshCollector1))
        elif shape == "2" and order == "2":
            idx_T10 = [0,3,1,4,2,5]
            dim = '2d'
            dims.append(dim)
            meshCollector2 = meshManager1.FindObject("MeshCollector[2D Duplicated Mesh]")
        elif shape == "2" and order == "1":
            idx_T10 = [0,1,2]
            dim = '2d'
            dims.append(dim)
            meshCollector2 = meshManager1.FindObject("MeshCollector[2D Duplicated Mesh]")
        elif shape == "3" and order == "1":
            idx_T10 = [0,1,2,3]
            dim = '2d'
            dims.append(dim)
            meshCollector2 = meshManager1.FindObject("MeshCollector[2D Duplicated Mesh]")
            


        
        
        
        elementCreateBuilder1 = fEModel1.NodeElementMgr.CreateElementCreateBuilder()
        destinationCollectorBuilder1 = elementCreateBuilder1.ElementType.DestinationCollector
        #elementCreateBuilder1.ElementType.DestinationCollector.ElementContainer = NXOpen.CAE.MeshCollector.Null
        #elementCreateBuilder1.ElementType.DestinationCollector.ElementContainer = meshCollector1
        #elementCreateBuilder1.ElementType.DestinationCollector.ElementContainer = meshCollector1
        ##add nodes
        [elementCreateBuilder1.Point.Add(Nodes[i]) for i in idx_T10]



        ##needs to be made clever
        if dim == '3d':
            elementCreateBuilder1.ElementDimensionOption = NXOpen.CAE.ElementCreateBuilder.ElemDimType.Solid
            elementCreateBuilder1.ElementType.ElementTypeName = str(e.GetSolverCardSyntax()[4][:8].strip()) +'(' + str(len(NodeIDs)) + ')'
            elementCreateBuilder1.NeutralName = str(e.GetSolverCardSyntax()[4][:8].strip()) +'(' + str(len(NodeIDs)) + ')'
            destinationCollectorBuilder1.AutomaticMode = False
            elementCreateBuilder1.ElementType.DestinationCollector.ElementContainer = meshCollector1
            elementCreateBuilder1.CollectorName = "3D Duplicated Mesh"
            elementCreateBuilder1.MeshName = "3D Duplicated Mesh" + str(j)
            elementCreateBuilder1.ExportMesh = True
            elementCreateBuilder1.Label = 1
            elementCreateBuilder1.Commit()
            elementCreateBuilder1.Destroy()
        elif dim == '2d':
            elementCreateBuilder1.ElementDimensionOption = NXOpen.CAE.ElementCreateBuilder.ElemDimType.Shell
            elementCreateBuilder1.ElementType.ElementTypeName = str(e.GetSolverCardSyntax()[4][:8].strip())
            elementCreateBuilder1.NeutralName = str(e.GetSolverCardSyntax()[4][:8].strip())
            destinationCollectorBuilder1.AutomaticMode = False
            elementCreateBuilder1.ElementType.DestinationCollector.ElementContainer = meshCollector2
            elementCreateBuilder1.CollectorName = "2D Duplicated Mesh"
            elementCreateBuilder1.MeshName = "2D Duplicated Mesh" + str(j)
            elementCreateBuilder1.ExportMesh = True
            elementCreateBuilder1.Label = 1
            elementCreateBuilder1.Commit()
            elementCreateBuilder1.Destroy()
        #meshCollector1 = meshManager1.FindObject("MeshCollector[Duplicated Mesh]")    
        
        
        
        ##needs to be made clever


        
        #elementCreateBuilder1.NewMeshOption = NXOpen.CAE.ElementCreateBuilder.NewMeshType.Existing
        #elementCreateBuilder1.NewMeshOption = NXOpen.CAE.ElementCreateBuilder.NewMeshType.Create
        ##need to smartify
        
        
        
    t2 = time.time()
    lw.WriteLine("time = " + str( t2-t1))

    ##merge meshes##

    selectedMeshes1 = [NXOpen.CAE.Mesh.Null] * len(es)
    toMerge3d = []
    toMerge2d = []
    for j,selectedMesh in enumerate(selectedMeshes1):
        #lw.WriteLine(str(selectedMesh))
        lw.WriteLine(str(dims[j]))
        if dims[j] == '3d':
            #selectedMeshes1[j] = meshManager1.FindObject("Mesh[3D Duplicated Mesh"+str(j)+"]")
            toMerge3d.append(meshManager1.FindObject("Mesh[3D Duplicated Mesh"+str(j)+"]"))
        if dims[j] == '2d':
            #selectedMeshes1[j] = meshManager1.FindObject("Mesh[3D Duplicated Mesh"+str(j)+"]")
            toMerge2d.append(meshManager1.FindObject("Mesh[2D Duplicated Mesh"+str(j)+"]"))
    if len(toMerge3d) > 1:
    #lw.WriteLine(str(selectedMeshes1))
        mesh5 = meshManager1.MergeMeshes(toMerge3d)
    if len(toMerge2d) > 1:
    #lw.WriteLine(str(selectedMeshes1))
        mesh6 = meshManager1.MergeMeshes(toMerge2d)

    t3 = time.time()
    lw.WriteLine("time = " + str( t3-t2))

    lw.WriteLine("Total time = " + str( t3-start_time))
    lw.WriteLine("Total time per element = " + str( (t3-start_time)/len(es)))
    
    

##    selectedMeshes1 = [NXOpen.CAE.Mesh.Null] * len(es)
    
    
##    for j,selectedMesh in enumerate(selectedMeshes1):
##        #lw.WriteLine(str(selectedMesh))
##        try:
##            selectedMeshes1[j] = meshManager1.FindObject("Mesh[2D Duplicated Mesh"+str(j)+"]")
##        except:
##            pass
##    lw.WriteLine(str(selectedMeshes1))
##    mesh5 = meshManager1.MergeMeshes(selectedMeshes1)

   
  
def main():
    theselect_element = None
    try:
        theselect_element =  select_element()
        #  The following method shows the dialog immediately
        theselect_element.Show()
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
    finally:
        if theselect_element != None:
            theselect_element.Dispose()
            theselect_element = None
    
if __name__ == '__main__':
    main()

