#==============================================================================
#   WARNING!!  This file is overwritten by the Block UI Styler while generating
#   the automation code. Any modifications to this file will be lost after
#   generating the code again.
# 
#        Filename:  X:\rhodri.kent\nx\NX OPEN\Test\MPCForceSummary2.py
# 
#         This file was generated by the NX Block UI Styler
#         Created by: Rhodri.Kent
#               Version: NX 1867
#               Date: 01-07-2021  (Format: mm-dd-yyyy)
#               Time: 16:28 (Format: hh-mm)
# 
#==============================================================================

#==============================================================================
#   Purpose:  This TEMPLATE file contains Python source to guide you in the
#   construction of your Block application dialog. The generation of your
#   dialog file (.dlx extension) is the first step towards dialog construction
#   within NX.  You must now create a NX Open application that
#   utilizes this file (.dlx).
# 
#   The information in this file provides you with the following:
# 
#   1.  Help on how to load and display your Block UI Styler dialog in NX
#       using APIs provided in NXOpen.BlockStyler namespace
#   2.  The empty callback methods (stubs) associated with your dialog items
#       have also been placed in this file. These empty methods have been
#       created simply to start you along with your coding requirements.
#       The method name, argument list and possible return values have already
#       been provided for you.
#==============================================================================

#------------------------------------------------------------------------------
# These imports are needed for the following template code
#------------------------------------------------------------------------------
import NXOpen
import NXOpen.BlockStyler
import math
import NXOpen.CAE
import NXOpen.UserDefinedObjects
import math
import NXOpen.UserDefinedObjects
import os
#import sys
import time

olist = []
nodes = []
ns = []
folders = []
strings = []
enums = []
selectedsols = []
listsols = []

theSession = NXOpen.Session.GetSession()
theUI = NXOpen.UI.GetUI()
workSimPart = theSession.Parts.BaseWork
displaySimPart = theSession.Parts.BaseDisplay
theUI = NXOpen.UI.GetUI()
theMessageBox = theUI.NXMessageBox
lw = theSession.ListingWindow
lw.Open()

simSimulation2 = workSimPart.Simulation
simSolution2 = simSimulation2.Solutions

resultManager = theSession.ResultManager

start_time  = time.time()

line_num = 0
    
[listsols.append(str(solution.Name)) for solution in simSolution2]

#------------------------------------------------------------------------------
# Represents Block Styler application cls
#------------------------------------------------------------------------------
class MPCForceSummary2:
    # static class members
    theSession = NXOpen.Session.GetSession()
    theUI = NXOpen.UI.GetUI()
    olist = []
    lw = theSession.ListingWindow
    lw.Open()
    
    #------------------------------------------------------------------------------
    # Constructor for NX Styler class
    #------------------------------------------------------------------------------
    def __init__(self):
        try:
            self.theSession = NXOpen.Session.GetSession()
            self.theUI = NXOpen.UI.GetUI()
            self.theDlxFileName = "SPC Force Summary2.dlx"
            self.theDialog = self.theUI.CreateDialog(self.theDlxFileName)
            self.theDialog.AddApplyHandler(self.apply_cb)
            self.theDialog.AddOkHandler(self.ok_cb)
            self.theDialog.AddUpdateHandler(self.update_cb)
            self.theDialog.AddInitializeHandler(self.initialize_cb)
            self.theDialog.AddEnableOKButtonHandler(self.enableOKButton_cb)
            self.theDialog.AddDialogShownHandler(self.dialogShown_cb)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            raise ex
        
    
    # ------------------------------- DIALOG LAUNCHING ---------------------------------
    # 
    #     Before invoking this application one needs to open any part/empty part in NX
    #     because of the behavior of the blocks.
    # 
    #     Make sure the dlx file is in one of the following locations:
    #         1.) From where NX session is launched
    #         2.) $UGII_USER_DIR/application
    #         3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    #             recommended. This variable is set to a full directory path to a file 
    #             containing a list of root directories for all custom applications.
    #             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    # 
    #     You can create the dialog using one of the following way:
    # 
    #     1. Journal Replay
    # 
    #         1) Replay this file through Tool->Journal->Play Menu.
    # 
    #     2. USER EXIT
    # 
    #         1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    #         2) Invoke the Shared Library through File->Execute->NX Open menu.
    # 
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # This method shows the dialog on the screen
    #------------------------------------------------------------------------------
    def Show(self):
        try:
            self.theDialog.Show()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Method Name: Dispose
    #------------------------------------------------------------------------------
    def Dispose(self):
        if self.theDialog != None:
            self.theDialog.Dispose()
            self.theDialog = None
    
    #------------------------------------------------------------------------------
    # ---------------------Block UI Styler Callback Functions--------------------------
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # Callback Name: initialize_cb
    #------------------------------------------------------------------------------
    def initialize_cb(self):
        try:
            self.group0 = self.theDialog.TopBlock.FindBlock("group0")
            self.selectNodes0 = self.theDialog.TopBlock.FindBlock("selectNodes0")
            self.group = self.theDialog.TopBlock.FindBlock("group")
            self.list_box0 = self.theDialog.TopBlock.FindBlock("list_box0")
            self.list_box0.SetListItems(listsols)
            self.nativeFolderBrowser0 = self.theDialog.TopBlock.FindBlock("nativeFolderBrowser0")
            #------------------------------------------------------------------------------
            # Registration of ListBox specific callbacks
            #------------------------------------------------------------------------------
            # self.list_box0.SetAddHandler(self.AddCallback)
            
            # self.list_box0.SetDeleteHandler(self.DeleteCallback)
            
            #------------------------------------------------------------------------------
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: dialogShown_cb
    # This callback is executed just before the dialog launch. Thus any value set 
    # here will take precedence and dialog will be launched showing that value. 
    #------------------------------------------------------------------------------
    def dialogShown_cb(self):
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
    
    #------------------------------------------------------------------------------
    # Callback Name: apply_cb
    #------------------------------------------------------------------------------
    def apply_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            ok_process(self)
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return errorCode
    
    #------------------------------------------------------------------------------
    # Callback Name: update_cb
    #------------------------------------------------------------------------------
    def update_cb(self, block):
        try:
            nodes.insert(0,self.selectNodes0)


            folders.append(self.nativeFolderBrowser0.Path)
            
            
            if block == self.selectNodes0:
                # ---- Enter your code here -----
                nodes.insert(0,block)
                pass

                
                
                # ---- Enter your code here -----
                pass

            elif block == self.nativeFolderBrowser0:
                # ---- Enter your code here -----
                folder = block.Path
                folders.append(folder)                  
                pass
            
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return 0
    
    #------------------------------------------------------------------------------
    # Callback Name: ok_cb
    #------------------------------------------------------------------------------
    def ok_cb(self):
        errorCode = 0
        try:
            # ---- Enter your callback code here -----
            ok_process(self)
            #errorCode = self.apply_cb()
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            errorCode = 1
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return errorCode
    
    
    #------------------------------------------------------------------------------
    # Callback Name: enableOKButton_cb
    # This callback allows the dialog to enable/disable the OK and Apply button.
    #------------------------------------------------------------------------------
    def enableOKButton_cb(self):
        try:
            # ---- Enter your callback code here -----
            pass
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return True
    #------------------------------------------------------------------------------
    # ListBox specific callbacks
    #------------------------------------------------------------------------------
    # def AddCallback (self list_box):
    # 
    # 
    
    # def DeleteCallback(self, list_box):
    # 
    # 
    
    #------------------------------------------------------------------------------
    
    #------------------------------------------------------------------------------
    # Function Name: GetBlockProperties
    # Returns the propertylist of the specified BlockID
    #------------------------------------------------------------------------------
    def GetBlockProperties(self, blockID):
        try:
            return self.theDialog.GetBlockProperties(blockID)
        except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        
        return None

def ok_process(self):
    global start_time
    start_time = time.time()    
    errorCode = 0
    selectedsols = (self.list_box0.GetSelectedItemStrings())
    #self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, [str(x) for x in selectedsols])
    try:
        #node = nodes[-1]
        #node = ",".join(nodes)
        #[ns.append(str(n.GetProperties().GetTaggedObjectVector("SelectedObjects")[-1].Label)) for n in nodes]
        #[ns.append(str(n.GetProperties().GetTaggedObjectVector("SelectedObjects")[i].Label)) for n,i in zip(nodes,range(0,len(n.GetProperties().GetTaggedObjectVector("SelectedObjects"))]
        [ns.append(str(nodes[0].GetProperties().GetTaggedObjectVector("SelectedObjects")[i].Label)) for i in range(0,len(nodes[0].GetProperties().GetTaggedObjectVector("SelectedObjects")))]
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        errorCode = 1
        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
        ns.clear()
        Show()
    try:
        node1 = ",".join(ns)
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        errorCode = 1
        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Ensure nodes are picked")
        ns.clear()
        #Show()




        #Show()
##            string = "ALL"
##            strings.append(string)
        

##        try:            
##            string = strings[-1]
##        except Exception as ex:
##            # ---- Enter your exception handling code here -----
##            errorCode = 1
##            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Ensure solution title is populated")
##            ns.clear()
##            Show()
    try:
        folder = folders[-1]
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        errorCode = 1
        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Ensure .csv output directory is selected")
        ns.clear()
        #Show()
  
    
##        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
##        pass
    if len(ns)*len(selectedsols)*len(folders[-1]) >0:
        #errorCode = self.apply_cb()
        out = "Selected Nodes = " + str(node1) + "\n" + "Selected Solutions = " + "".join([str(x)+"; " for x in selectedsols])+ "\n" + "Output directory = " + folder + "\n" + "\n"
        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Information, out)
        errorCode = get_force(ns,self,selectedsols)
    else:
        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Please fully populate form")
        errorCode = 1
        ns.clear()
        #Show()
    return errorCode

node_lst = ns
line_nums = [0] # for MPC force line reference in output
line_nums2 = [0] # for MPC moment line reference in output
output_lines = []
output_lines2 = []

def get_force(node_ids,self,selectedsols) :
    header_line = "NODE,FX,FY,FZ,F-Magnitude,MX,MY,MZ,M-Magnitude,Solution,Subcase,Result File Directory, Result File Name" + "\n"
    
    try:
##        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, [str(x) for x in selectedsols])
##        if str(enums[-1]) == "All Solutions":
##            SOLUTION = "ALL"
##        else:
##            SOLUTION = str(selectedsols[-1])
        
        output_directory = folders[-1]
        if len(selectedsols) == 0:
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Select at least one Solution")
        elif len(selectedsols) > 0:
            for SOLUTION in selectedsols:
                if len(node_ids) >0:

                    theSession  = NXOpen.Session.GetSession()
                    workSimPart = theSession.Parts.BaseWork
                    displaySimPart = theSession.Parts.BaseDisplay
                    theUI = NXOpen.UI.GetUI()
                    theMessageBox = theUI.NXMessageBox
                    lw = theSession.ListingWindow
                    lw.Open()

                    simSimulation2 = workSimPart.Simulation
                    simSolution2 = simSimulation2.Solutions

                    cwd = os.getcwd()
                    lw.WriteLine(str(cwd))

                    resultManager = theSession.ResultManager

                    line_num = 0 # for MPC force line reference in output
                    line_num2 = 0 # for MPC moment line reference in output
                        
                    

                    lsols = []
                    
                    [lsols.append(str(solution.Name)) for solution in simSolution2]
                    

                    if SOLUTION in lsols:
                        gen = (solution for solution in simSolution2 if str(solution.Name) == SOLUTION)
                        #self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Solution found, process to continue")
                        solookup(gen,resultManager,node_ids)#,line_num,line_nums2[0],output_lines)
                    else:
                        self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "Solution not found, check spelling or results file")
                            
                       
                else:
                    self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, "No nodes")

        with open(os.path.join(output_directory, "SPC_Force.csv"), "w") as data:
            combined_output_lines = [str(SPCforce)+str(SPCmoment) for SPCforce,SPCmoment in [list_item for list_item in list(zip(output_lines,output_lines2))]]
            data.write(header_line)
            combined_output_lines = [line + "\n" for line in combined_output_lines]
            [data.write(out) for out in  combined_output_lines]


    except Exception as ex:
            # ---- Enter your exception handling code here -----
            self.theUI.NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))

def solookup(gen,resultManager,node_ids):#,line_num,line_num2,output_lines):
    theSession  = NXOpen.Session.GetSession()
    lw = theSession.ListingWindow
    lw.Open()  
    for solution in gen:
                    lw.WriteLine("Solution name = " + str(solution.Name))
                    lw.WriteLine("Solver Type = " + str(solution.SolverType))
                    lw.WriteLine("Solution Type = " + str(solution.SolutionType))
                    lw.WriteLine("Analysis Type = " + str(solution.AnalysisType ))

                    try:
                        solResult = resultManager.CreateSolutionResult(solution)
                        loadcases = solResult.GetLoadcases()

                        num_nodes = solResult.AskNumNodes() # total number of nodes in result
                        lst_of_nodes = [] # empty list of node labels
                        if num_nodes == 0: #check if any nodes exists
                            NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str("No nodes in solution: " + str(solution)))
                        else:
                            for idx in range(1,num_nodes+1): # iterate from zero to number of nodes
                                lst_of_nodes.append(solResult.AskNodeLabel(idx)) #for each node in

                        for loadcase in loadcases:
                            lw.WriteLine("Loadcase name = " + str(loadcase.Name))

                            iterations = loadcase.GetIterations()
                            for iteration in iterations:
                                lw.WriteLine("Iteration name = " + str(iteration.Name))

                                resultTypes = iteration.GetResultTypes()

                                for resultType in resultTypes:
                                    lw.WriteLine("Result Type = " + str(resultType.Name))
                                    lw.WriteLine("Data Type = " + str(resultType.Datatype))
                                    lw.WriteLine("Location = " + str(resultType.Location))
                                    lw.WriteLine("Quantity = " + str(resultType.Quantity))
                                    lw.WriteLine("Complex = " + str(resultType.Complex))
                                    lw.WriteLine("Title = " + str(resultType.Title))
                                    lw.WriteLine("SubTitle = " + str(resultType.Subtitle))
                                    lw.WriteLine("Username = " + str(resultType.UserName))

##                                    components = resultType.AskComponents()
##
##                                    components_str = "Componets ="
##                                    for component in components:
##                                        for item in component:
##                                            components_str = components_str + " " + str(item)
##                                    lw.WriteLine(components_str)
##
##                                    resultParam = resultManager.CreateResultParameters()
##
##                                    resultParam.SetGenericResultType(resultType)
##                                    resultParam.SetResultComponent(components[1][-1])
##                                    resultParam.SetCoordinateSystem(NXOpen.CAE.Result.CoordinateSystem.AbsoluteRectangular)

                                    #resultAccess = resultManager.CreateResultAccess(solResult,resultParam)
                                    #num_nodes = solResult.AskNumNodes() # total number of nodes in result
                                    #lst_of_nodes = [] # empty list of node labels
                                    #if num_nodes == 0: #check if any nodes exists
                                    #    NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str("No nodes in solution: " + str(solution)))
                                    #else:
                                    #    for idx in range(1,num_nodes): # iterate from zero to number of nodes
                                    #        lst_of_nodes.append(solResult.AskNodeLabel(idx)) #for each node in result, add the node label (id) to the list of node labels
                                  
                                    if resultType.Quantity == NXOpen.CAE.Result.Quantity.ReactionForce and resultType.Location == NXOpen.CAE.Result.Location.Nodal:
                                        components = resultType.AskComponents()

                                        components_str = "Componets ="
                                        for component in components:
                                            for item in component:
                                                components_str = components_str + " " + str(item)
                                        lw.WriteLine(components_str)
                                                                                    
                                        for node_id in node_ids:
                                            if int(node_id) in lst_of_nodes:
                                                try:


                                                    resultParam = resultManager.CreateResultParameters()

                                                    resultParam.SetGenericResultType(resultType)
                                                    resultParam.SetResultComponent(components[1][-1])
                                                    resultParam.SetCoordinateSystem(NXOpen.CAE.Result.CoordinateSystem.AbsoluteRectangular)
                                                    resultAccess = resultManager.CreateResultAccess(solResult,resultParam)
                                                    nodeIndex = solResult.AskNodeIndex(int(node_id))
                                                    nodeValues = resultAccess.AskNodalResultAllComponents(nodeIndex)
                                                    resultManager.DeleteResultAccess(resultAccess)
                                                    lw.WriteLine("NODE VALUES = " + str(nodeValues))
                                                    lw.WriteLine("  Node " + str(node_id) + " Reaction Force:")
                                                    for i in range(0,len(nodeValues)):                        
                                                        lw.WriteLine("Component = [" + str(components[0][i]) + "]   Value:   [" + str(nodeValues[i]/1000) + "]")
                                                    outline = str(node_id) + "," +  ','.join([str(elem/1000) for elem in nodeValues])#+ "," + str(solution.Name) + "\n"
                                                    output_lines.append(outline)
                                                    #line_num +=1
                                                    resultManager.DeleteResultParameters(resultParam)
                                                except Exception as ex:
                                                    # ---- Enter your exception handling code here -----
                                                    NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
                                            else:
                                                lw.WriteLine("NODE ID " + str(node_id) + " not in result for MPC Force Extraction")
                                                

                                                lw.WriteLine(str(len(lst_of_nodes)))
                                                lw.WriteLine(str(type(lst_of_nodes[-1])))
                                                lw.WriteLine(str(type(node_id)))
                                                #[lw.WriteLine(str(x)) for x in lst_of_nodes]
                                                
                                            



        ##
                                    if resultType.Quantity == NXOpen.CAE.Result.Quantity.ReactionMoment and resultType.Location == NXOpen.CAE.Result.Location.Nodal:
                                        components = resultType.AskComponents()

                                        components_str = "Componets ="
                                        for component in components:
                                            for item in component:
                                                components_str = components_str + " " + str(item)
                                        lw.WriteLine(components_str)

                                        for node_id in node_ids:
                                            if int(node_id) in lst_of_nodes:
                                                
                                                theResultReference = solution.GetResultReferenceByIndex(0)
                                                theResultFileName = theResultReference.GetResultFile()

                                                resultParam = resultManager.CreateResultParameters()

                                                resultParam.SetGenericResultType(resultType)
                                                resultParam.SetResultComponent(components[1][-1])
                                                resultParam.SetCoordinateSystem(NXOpen.CAE.Result.CoordinateSystem.AbsoluteRectangular)
                                                resultAccess = resultManager.CreateResultAccess(solResult,resultParam)
                                                nodeIndex = solResult.AskNodeIndex(int(node_id))
                                                nodeValues = resultAccess.AskNodalResultAllComponents(nodeIndex)
                                                resultManager.DeleteResultAccess(resultAccess)
                                                lw.WriteLine("  Node " + str(node_id) + " Reaction Moment:")
                                                for i in range(0,len(nodeValues)):                           
                                                    lw.WriteLine("Component = [" + str(components[0][i]) + "]   Value:   [" + str(nodeValues[i]/1000) + "]")
                                                outline = "," +  ','.join([str(elem/1000) for elem in nodeValues])+ "," + str(solution.Name) + "," + str(loadcase.Name) + "," + str(theResultFileName[0]) + "," + str(theResultFileName[1])
                                                output_lines2.append(outline)
                                                #output_lines[line_num2]+= outline
                                                #lw.WriteLine(output_lines[line_num2])
                                                #line_num2 += 1
                                                #line_nums2[0] = line_num2
                                                resultManager.DeleteResultParameters(resultParam)
                                            else:
                                                lw.WriteLine("NODE ID " + str(node_id) + " not in result for MPC Moment Extraction")
                                                #line_num2 += 1
                                                #line_nums2[0] = line_num2

                                        
                                    #resultManager.DeleteResultAccess(resultAccess)
                                    #resultManager.DeleteResultParameters(resultParam)

                                   
                                        
                                    lw.WriteLine("")

                    #write here
                        try:
                            resultManager.DeleteResult(solResult)
                        except Exception as ex:
                            NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))

                    except Exception as ex:
                        # ---- Enter your exception handling code here -----
                        NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))

 

    
def main():
    theMPCForceSummary2 = None
    try:
        theMPCForceSummary2 =  MPCForceSummary2()
        #  The following method shows the dialog immediately
        theMPCForceSummary2.Show()
    except Exception as ex:
        # ---- Enter your exception handling code here -----
        NXOpen.UI.GetUI().NXMessageBox.Show("Block Styler", NXOpen.NXMessageBox.DialogType.Error, str(ex))
    finally:
        if theMPCForceSummary2 != None:
            theMPCForceSummary2.Dispose()
            theMPCForceSummary2 = None
    
if __name__ == '__main__':
    main()
    endtime = time.time()
    lw.WriteLine("Total time = " + str(endtime-start_time) + " seconds.")
    lw.WriteLine("Total time = " + str((endtime-start_time)/60) + " minutes.")
